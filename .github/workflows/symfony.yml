name: Symfony CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  symfony-tests:
    runs-on: ubuntu-latest
    steps:
      # Configuration PHP avec versionnage flexible pour bénéficier des mises à jour de sécurité
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: composer

      # Cloner le dépôt
      - uses: actions/checkout@v4

      # Configurer le fichier d'environnement pour les tests
      - name: Set up test environment
        run: php -r "file_exists('.env.test.local') || copy('.env.test', '.env.test.local');"

      # Cache des packages Composer
      - name: Cache Composer dependencies
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      # Installation des dépendances Composer
      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      # Préparer la base de données pour les tests
      - name: Create SQLite Database
        run: |
          mkdir -p data
          touch data/database.sqlite

      # Exécuter les tests unitaires et fonctionnels via PHPUnit
      - name: Run PHPUnit tests
        env:
          DATABASE_URL: sqlite:///%kernel.project_dir%/data/database.sqlite
        run: vendor/bin/phpunit

      # Nettoyage de l’environnement après les tests (optionnel)
      - name: Clean up test environment
        run: rm -rf data/database.sqlite
